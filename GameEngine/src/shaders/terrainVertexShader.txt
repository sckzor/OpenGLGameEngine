#version 400 core
 
in vec3 position;
in vec2 textureCoords;
in vec3 normal;
 
flat out vec2 pass_textureCoords;
flat out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out float visibility;
out vec4 shadowCoords;

uniform float density;
uniform float gradient;

uniform float transitionDistance;
 
uniform mat4 transformationMatrix;
uniform float shadowDistance;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];

uniform mat4 toShadowMapSpace;

uniform vec4 plane;

 
 
void main(void){       
    //if(position.y != -100){
    vec4 worldPosition = transformationMatrix * vec4(position,1.0);
    shadowCoords = toShadowMapSpace * worldPosition;
    
    gl_ClipDistance[0] = dot(worldPosition, plane);
    
    vec4 positionRelativeToCam = viewMatrix * worldPosition;
    gl_Position = projectionMatrix * positionRelativeToCam;
    pass_textureCoords = textureCoords;
   
    surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
    for(int i = 0; i < 4; i++){
    	toLightVector[i] = lightPosition[i] - worldPosition.xyz;
    }
    toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
   
    float distance = length(positionRelativeToCam.xyz);
    visibility = exp(-pow((distance*density),gradient));
    visibility = clamp(visibility,0.0,1.0);
    
    distance = distance - (shadowDistance - transitionDistance);
    distance = distance / transitionDistance;
    shadowCoords.w = clamp(1.0-distance, 0.0, 1.0);
    //}
}