#version 400 core

layout (location = 0) out vec4 out_Color;
layout (location = 1) out vec4 out_BrightColor;

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVector;
in vec3 fromLightVector[4];
in float visibility;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;
uniform vec3 skyColour;
uniform vec3 lightColour[4];
uniform vec3 attenuation[4];
uniform float moveFactor;
uniform float nearPlane;
uniform float farPlane;

const float waveStrength = 0.02;
const float shineDamper = 20.0;
const float reflectivity = 0.5;

void main(void) {
	vec2 ndc = (clipSpace.xy/clipSpace.w)/2 + 0.5;
	vec2 refractionTexCoords = vec2(ndc.x, ndc.y);
	vec2 reflectionTexCoords = vec2(ndc.x, -ndc.y);

	float depth = texture(depthMap, refractionTexCoords).r;
	float floorDistance = 2.0 * nearPlane * farPlane / (farPlane + nearPlane - (2.0 * depth - 1.0) * (farPlane-nearPlane));

	depth = gl_FragCoord.z;
	float waterDistance = 2.0 * nearPlane * farPlane / (farPlane + nearPlane - (2.0 * depth - 1.0) * (farPlane-nearPlane));
	
	float waterDepth = floorDistance - waterDistance;

	vec2 distortedTexCoords = texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg*0.1;
	distortedTexCoords = textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y+moveFactor);
	vec2 totalDistortion = (texture(dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * waveStrength * clamp(waterDepth/20, 0.0, 1.0);
	
	refractionTexCoords += totalDistortion;
	refractionTexCoords = clamp(refractionTexCoords, 0.001, 0.999);
	
	reflectionTexCoords += totalDistortion;
	reflectionTexCoords.x = clamp(reflectionTexCoords.x, 0.001, 0.999);
	reflectionTexCoords.y = clamp(reflectionTexCoords.y, -0.999, -0.001);
	
	vec4 reflectColour = texture(reflectionTexture, reflectionTexCoords);
	vec4 refractColour = texture(refractionTexture, refractionTexCoords);

	vec4 normalMapColour = texture(normalMap, distortedTexCoords);
	vec3 normal = vec3(normalMapColour.r * 2.0 - 1.0, normalMapColour.b * 3.0, normalMapColour.g * 2.0 - 1.0);
	normal = normalize(normal);

	vec3 totalSpecular = vec3(0.0);

	vec3 viewVector = normalize(toCameraVector);
	float refractiveFactor = dot(viewVector, normal);
	refractiveFactor = pow(refractiveFactor, 0.65);
	refractiveFactor = clamp(refractiveFactor, 0.0, 1.0);
	for(int i = 0; i < 4; i++){
		float distance = length(fromLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 reflectedLight = reflect(normalize(fromLightVector[i]), normal);
		float specular = max(dot(reflectedLight, viewVector), 0.0);
		specular = pow(specular, shineDamper);
		totalSpecular = totalSpecular + (lightColour[i] * specular * reflectivity * clamp(waterDepth/20, 0.0, 1.0))/attFactor;
	}
	out_Color = mix(reflectColour, refractColour, refractiveFactor);
	out_Color = mix(out_Color, vec4(0.0, 0.3, 0.5, 1.0), 0.2) + vec4(totalSpecular, 0.0);
	out_Color.a = clamp(waterDepth/5, 0.0, 1.0);
	
	out_Color = mix(vec4(skyColour,1.0),out_Color, visibility);
	out_BrightColor = vec4(0.0);
}